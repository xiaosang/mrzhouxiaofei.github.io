[{"title":"Laravel 验证中的正则 regex","url":"http://mrzhouxiaofei.com/2017/12/09/Laravel 验证中的正则 regex/","content":"<p>Laravel 的验证功能非常强大，基本上常见的需求都有对应的验证规则，对于一些的特殊的验证需求，Laravel 也提供了正则验证。</p>\n<p>正则验证之前也用过一次，今天再次使用时，发现不行了，又看了一下官方文档，才知道问题出在哪，特此记录下来。</p>\n<p>官方文档：</p>\n<p><strong>regex:pattern</strong></p>\n<p>验证字段必须匹配给定正则表达式</p>\n<blockquote>\n<p>注：使用 regex 模式时，规则必须放在数组中，而不能使用管道分隔符，尤其是正则表达式中已经使用了管道符号时。</p>\n</blockquote>\n<p>之前使用正则验证，使用管道符 <strong>|</strong> 和其它规则分开，今天再次使用正则验证时，没有成功，使用时像下面这样：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rules</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [</div><div class=\"line\">        <span class=\"string\">'username'</span> =&gt; <span class=\"string\">'required|regex:/^[a-zA-Z0-9_-]&#123;4,16&#125;$/'</span>,</div><div class=\"line\">        <span class=\"string\">'month'</span> =&gt; <span class=\"string\">'required|regex:/^([1-9]|1[0-2])$/'</span>,</div><div class=\"line\">    ];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看了一下文档，使用正则验证时，规则必须放在数组中，改成下面这样就成功了：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rules</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [</div><div class=\"line\">        <span class=\"string\">'username'</span> =&gt; [</div><div class=\"line\">            <span class=\"string\">'required'</span>,</div><div class=\"line\">            <span class=\"string\">'regex:/^[a-zA-Z0-9_-]&#123;4,16&#125;$/'</span></div><div class=\"line\">        ],</div><div class=\"line\">        <span class=\"string\">'month'</span> =&gt; [</div><div class=\"line\">            <span class=\"string\">'required'</span>,</div><div class=\"line\">            <span class=\"string\">'regex:/^([1-9]|1[0-2])$/'</span></div><div class=\"line\">        ],</div><div class=\"line\">    ];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者这样：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rules</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [</div><div class=\"line\">        <span class=\"string\">'username'</span> =&gt; <span class=\"keyword\">array</span>(</div><div class=\"line\">            <span class=\"string\">'required'</span>,</div><div class=\"line\">            <span class=\"string\">'regex:/^[a-zA-Z0-9_-]&#123;4,16&#125;$/'</span></div><div class=\"line\">        ),</div><div class=\"line\">        <span class=\"string\">'month'</span> =&gt; <span class=\"keyword\">array</span>(</div><div class=\"line\">            <span class=\"string\">'required'</span>,</div><div class=\"line\">            <span class=\"string\">'regex:/^([1-9]|1[0-2])$/'</span></div><div class=\"line\">        ),</div><div class=\"line\">    ];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>之前能够成功，应该是正则中没有使用管道符 <strong>|</strong>，对于第一个 username 的验证，没有使用管道符，不放在在数组中，也是可以验证的，第二个 month 的验证就必须放在数组中了。不过为了规范起见，使用正则验证时，还是要把验证规则放到数组中。<br><br><br></p>\n","categories":["后端"],"tags":["PHP","Laravel"]},{"title":"PHP 中 this self static 的区别","url":"http://mrzhouxiaofei.com/2017/11/27/PHP 中 this self static 的区别/","content":"<h1 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h1><p>最近在做软件工程的课程设计，碰到一个问题，去扒 Laravel 源码，又搜索一番，发现是对 self static 的理解不深，才出现了问题，所以记录下来，避免再次犯同样的错误。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>this 比较好理解，就是指向当前对象，用于访问当前对象的非静态变量和非静态方法，它是和对象相关的；</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $name;</div><div class=\"line\">                </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">                </div><div class=\"line\">$p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">$p2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">$p-&gt;name = <span class=\"string\">\"小红\"</span>;</div><div class=\"line\">$p2-&gt;name = <span class=\"string\">\"小明\"</span>;</div><div class=\"line\">$p-&gt;getName();  <span class=\"comment\">// 小红</span></div><div class=\"line\">$p2-&gt;getName();  <span class=\"comment\">// 小明</span></div></pre></td></tr></table></figure>\n<p>上例中 new 了两个对象，并分别设置对象的 name 属性，getName() 中使用了 this 访问当前对象的 name 属性，所以分别输出了 name 的值。所以说，this 就是指向当前对象，不指向其他对象或类。</p>\n<h2 id=\"self\"><a href=\"#self\" class=\"headerlink\" title=\"self\"></a>self</h2><p>self 和 this 不同，它指向类本身，不指向任何实例化对象，一般用来访问类中的静态变量和静态方法；</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> $name = <span class=\"string\">\"小红\"</span>;</div><div class=\"line\">                     </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">self</span>::$name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">           </div><div class=\"line\">$p = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">$p2 = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">$p::getName();  <span class=\"comment\">// 小红</span></div><div class=\"line\">$p2::getName();  <span class=\"comment\">// 小红</span></div><div class=\"line\">$p::$name = <span class=\"string\">\"小明\"</span>;</div><div class=\"line\">$p::getName();  <span class=\"comment\">// 小明</span></div><div class=\"line\">$p2::getName();  <span class=\"comment\">// 小明</span></div></pre></td></tr></table></figure>\n<p>上例中 new 了两个对象，并修改了其中一个对象的 name 属性，另一个对象的 name 属性值也改变了，所以说，self 是指向当前类的，和对象无关，所有的对象共用一个值。</p>\n<h2 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h2><p>static 和 self 一样，都是指向类，一般都用来访问类中的静态变量和静态方法，但是又有一些不一样，具体来讲：self 写在哪个类里，实际调用的就是这个类；static 则是写在父类里，然后通过子类用到了这个 static，这个 static 指向的是这个子类，官方称之为 <strong>后期静态绑定</strong> 。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"Hello\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">       </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saySelf</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>::say();</div><div class=\"line\">    &#125;</div><div class=\"line\">          </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayStatic</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">static</span>::say();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">            </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"World\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">                 </div><div class=\"line\">$b = <span class=\"keyword\">new</span> B();</div><div class=\"line\">$b-&gt;say();  <span class=\"comment\">// World</span></div><div class=\"line\">$b-&gt;saySelf();  <span class=\"comment\">// Hello</span></div><div class=\"line\">$b-&gt;sayStatic();  <span class=\"comment\">// World</span></div></pre></td></tr></table></figure>\n<p>上例中可以看到，self 写在 A 类里，调用时就指向了 A 类，static 同样写在 A 类里，但是用 A 类的子类 B 类的对象去调用时，却指向了 B 类，在使用时，static 才确定指向哪个类，这就是 <strong>后期静态绑定</strong> 。</p>\n<p><a href=\"http://php.net/manual/zh/language.oop5.late-static-bindings.php\" target=\"_blank\" rel=\"external\">后期静态绑定</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>this 指向当前对象，用来访问当前对象的非静态变量和非静态方法；<br>self 指向类，一般用来访问当前类的静态变量和静态方法，运行之前已经确定指向哪个类；<br>static 指向类，一般用来访问当前类的静态变量和静态方法，但又 <strong>不限于</strong> 静态的调用，运行时才确定指向哪个类。<br><br><br></p>\n","categories":["后端"],"tags":["PHP"]},{"title":"HTTP 协议详解","url":"http://mrzhouxiaofei.com/2017/09/17/HTTP 协议详解/","content":"<h1 id=\"HTTP-协议概述\"><a href=\"#HTTP-协议概述\" class=\"headerlink\" title=\"HTTP 协议概述\"></a>HTTP 协议概述</h1><p>HTTP 超文本传输协议，学过计算机网络的应该知道，所谓协议，就是指通信双方共同遵循的规范。HTTP 协议就是浏览器和服务器之间进行 “沟通” 的一种规范，它是互联网的基础协议，学习 Web 开发的都应当熟悉 HTTP 协议。</p>\n<h1 id=\"HTTP-协议特点\"><a href=\"#HTTP-协议特点\" class=\"headerlink\" title=\"HTTP 协议特点\"></a>HTTP 协议特点</h1><h2 id=\"无连接\"><a href=\"#无连接\" class=\"headerlink\" title=\"无连接\"></a>无连接</h2><h2 id=\"无状态\"><a href=\"#无状态\" class=\"headerlink\" title=\"无状态\"></a>无状态</h2><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"420\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=247160&auto=1&height=66\"></iframe>\n\n<p><br><br></p>\n","categories":["后端"],"tags":["HTTP"]},{"title":"Laravel5.5 + Vue2 + Element 环境搭建","url":"http://mrzhouxiaofei.com/2017/09/17/Laravel5.5 + Vue2 + Element 环境搭建/","content":"<h1 id=\"搭建说明\"><a href=\"#搭建说明\" class=\"headerlink\" title=\"搭建说明\"></a>搭建说明</h1><p>同类的教程网上也有不少，本文不是为了重复造轮子，只是在 Laravel5.5 LTS 推出之际，重新记录自己的搭建过程，避免以后再次踩坑。</p>\n<p>网上的许多教程都是基于 Laravel5 系列的不同版本，虽然大致过程都差不多，但是对于前端编译工具不甚了解的人来说，官方推荐的前端编译工具的改变也着实容易让人迷糊。</p>\n<p>为了便于理解，本文初次搭建时，尽量简单，能运行即可，关于前端编译工具，Vue 路由等等，后面再说。</p>\n<p>本文全部代码，可以到 github 上获取： </p>\n<p><a href=\"https://github.com/mrzhouxiaofei/Larvuent\" target=\"_blank\" rel=\"external\">https://github.com/mrzhouxiaofei/Larvuent</a></p>\n<h1 id=\"搭建过程\"><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h1><h2 id=\"1-新建-Laravel5-5-项目\"><a href=\"#1-新建-Laravel5-5-项目\" class=\"headerlink\" title=\"1.新建 Laravel5.5 项目\"></a>1.新建 Laravel5.5 项目</h2><p>在 Web 服务器目录下，使用 Composer 建立新项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project --prefer-dist laravel/laravel Larvuent // 新项目名为 Larvuent</div></pre></td></tr></table></figure></p>\n<p>Larvuent 安装完成后，执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd Larvuent</div></pre></td></tr></table></figure></p>\n<p><strong>说明：建议配置虚拟主机</strong></p>\n<h2 id=\"2-安装前端依赖库\"><a href=\"#2-安装前端依赖库\" class=\"headerlink\" title=\"2.安装前端依赖库\"></a>2.安装前端依赖库</h2><p>进入 Larvuent 项目后，执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install // 速度慢的请自行切换淘宝镜像 cnpm</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-修改-Laravel-路由\"><a href=\"#3-修改-Laravel-路由\" class=\"headerlink\" title=\"3.修改 Laravel 路由\"></a>3.修改 Laravel 路由</h2><p>修改 <strong>routes/web.php</strong> 文件为<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> view(<span class=\"string\">'index'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-新建-Hello-vue-文件\"><a href=\"#4-新建-Hello-vue-文件\" class=\"headerlink\" title=\"4.新建 Hello.vue 文件\"></a>4.新建 Hello.vue 文件</h2><p>在 <strong>resources/assets/js/components</strong> 目录下新建 Hello.vue 文件<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &lt;h1&gt;Hello, Larvuent!&lt;/h1&gt;</div><div class=\"line\">        &lt;p class=\"hello\"&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">                             </div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">export default &#123;</div><div class=\"line\">    data() &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            msg: 'This is a Laravel with Vue and Element Demo.'</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">                           </div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.hello &#123;</div><div class=\"line\">    font-size: 2em;</div><div class=\"line\">    color: green;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"5-修改-app-js-文件，渲染组件\"><a href=\"#5-修改-app-js-文件，渲染组件\" class=\"headerlink\" title=\"5.修改 app.js 文件，渲染组件\"></a>5.修改 app.js 文件，渲染组件</h2><p>修改 <strong>resources/assets/js/app.js</strong> 文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./bootstrap'</span>);</div><div class=\"line\">       </div><div class=\"line\"><span class=\"built_in\">window</span>.Vue = <span class=\"built_in\">require</span>(<span class=\"string\">'vue'</span>);</div><div class=\"line\">      </div><div class=\"line\"><span class=\"comment\">// Vue.component('example', require('./components/Example.vue')); // 注释掉</span></div><div class=\"line\"><span class=\"keyword\">import</span> Hello <span class=\"keyword\">from</span> <span class=\"string\">'./components/Hello.vue'</span>; <span class=\"comment\">// 引入Hello 组件</span></div><div class=\"line\">       </div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(Hello)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>说明：app.js 是构建 Vue 项目的主文件，最后所有的组件都会被引入到这个文件，在引入所有组件之前，bootstrap.js 文件做了一些初始化的操作。同时，因为有了 window.Vue = require(‘vue’) 这句话，就不再需要使用 import Vue from ‘vue’ 重复导入 Vue 了。</strong></p>\n<h2 id=\"6-新建-Laravel-视图文件，和-Vue-交互\"><a href=\"#6-新建-Laravel-视图文件，和-Vue-交互\" class=\"headerlink\" title=\"6.新建 Laravel 视图文件，和 Vue 交互\"></a>6.新建 Laravel 视图文件，和 Vue 交互</h2><p>在 <strong>resources/views</strong> 目录下新建 index.blade.php 文件<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Larvuent<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">       </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; mix('js/app.js') &#125;&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>说明：你可能在其他教程中看到有的在使用 assets 函数，这两个函数的主要区别就是 assets 函数会直接使用所填路径去 public 文件夹下找文件，而 mix 函数会自动加载带 hash 值的前端资源。这是和 Laravel 前端资源的缓存刷新相关的，如果现在还不明白，不要紧，你记得使用 mix 函数就好了，然后继续往后看。</strong></p>\n<h2 id=\"7-编译前端组件，运行\"><a href=\"#7-编译前端组件，运行\" class=\"headerlink\" title=\"7.编译前端组件，运行\"></a>7.编译前端组件，运行</h2><p>执行以下命令，编译前端资源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure></p>\n<p>该命令默认会去执行根目录下的 webpack.mix.js 文件，使用 Laravel 提供的 Laravel Mix 编译资源，并将编译好的资源放在根目录 public 文件夹下。 </p>\n<p><strong>说明：前端编译工具有许多，比如 gulp、webpack 等等，Laravel 也为自己提供了开箱即用的编译工具，比如 Laravel5.3 及更早版本提供基于 gulp 的 Laravel Elixir 和从 Laravel5.4 开始提供基于 webpack 的 Laravel Mix，当然你也可以不使用官方提供的工具，自己去配置编译工具。这些编译工具的作用都是一样的，使用方法也大同小异。前面说过，本文第一次安装尽量简单，能运行即可，所以不再去配置前端编译工具，使用官方提供的即可。</strong></p>\n<p>访问项目  </p>\n<p><img src=\"/images/Larvuent_5.jpg\" alt=\"\"></p>\n<p>到目前为止，Laravel + Vue 已经完成了，下面开始引入 Element。</p>\n<h2 id=\"8-引入-Element\"><a href=\"#8-引入-Element\" class=\"headerlink\" title=\"8.引入 Element\"></a>8.引入 Element</h2><p>执行命令，安装 ElementUI<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i element-ui -S</div></pre></td></tr></table></figure></p>\n<p>修改 <strong>resources/assets/js/app.js</strong> 文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Hello <span class=\"keyword\">from</span> <span class=\"string\">'./components/Hello.vue'</span>; <span class=\"comment\">// 引入Hello 组件</span></div><div class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-default/index.css'</span>;</div><div class=\"line\">Vue.use(ElementUI);</div></pre></td></tr></table></figure></p>\n<h2 id=\"9-修改-Hello-vue-文件，使用-Element-组件\"><a href=\"#9-修改-Hello-vue-文件，使用-Element-组件\" class=\"headerlink\" title=\"9.修改 Hello.vue 文件，使用 Element 组件\"></a>9.修改 Hello.vue 文件，使用 Element 组件</h2><p>修改 <strong>resources/assets/js/components/Hello.vue</strong> 文件为<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, Larvuent!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"visible = true\"</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-dialog</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"visible\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>欢迎使用 Element<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-dialog</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    data() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">            <span class=\"attr\">visible</span>: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">.hello &#123;</div><div class=\"line\">    font-size: 2em;</div><div class=\"line\">    color: green;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"10-再次编译前端资源，运行\"><a href=\"#10-再次编译前端资源，运行\" class=\"headerlink\" title=\"10.再次编译前端资源，运行\"></a>10.再次编译前端资源，运行</h2><p>执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure></p>\n<p>访问项目，点击按钮 </p>\n<p><img src=\"/images/Larvuent_2.jpg\" alt=\"\"></p>\n<p>好了，到目前为止，Laravel5.5 + Vue2 + Element 的环境搭建已经完成了，为了方便理解，第一次的搭建过程尽量简洁。本文下面的部分将使用 Vue 路由等等，逐步完善，便于后期的开发。</p>\n<h1 id=\"完善\"><a href=\"#完善\" class=\"headerlink\" title=\"完善\"></a>完善</h1><h2 id=\"CSRF-防护\"><a href=\"#CSRF-防护\" class=\"headerlink\" title=\"CSRF 防护\"></a>CSRF 防护</h2><p>环境搭建完成后，访问项目，打开开发者模式，切换到 Console ，会看到以下报错</p>\n<p><img src=\"/images/Larvuent_3.jpg\" alt=\"\"></p>\n<p>Laravel 为了避免应用遭到跨站请求伪造攻击(CSRF)，自动为每一个有效用户会话生成一个 CSRF 令牌，该令牌用于验证授权用户和发起请求者是否是同一个人。</p>\n<p>修改 <strong>resources/views/index.blade.php</strong> 文件为<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"csrf-token\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"&#123;&#123; csrf_token() &#125;&#125;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Larvuent<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">       </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; mix('js/app.js') &#125;&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>创建一个 meta 标签并将令牌保存到该 meta 标签中，问题可解决。</p>\n<h2 id=\"使用-Vue-Router\"><a href=\"#使用-Vue-Router\" class=\"headerlink\" title=\"使用 Vue Router\"></a>使用 Vue Router</h2><p>构建大型项目时，使用 Vue Router 将是一个好的方式，它可以帮助你更好的组织代码，优化路由。</p>\n<h3 id=\"1-安装-vue-router\"><a href=\"#1-安装-vue-router\" class=\"headerlink\" title=\"1.安装 vue-router\"></a>1.安装 vue-router</h3><p>执行命令，安装 vue-router<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install vue-router --save-dev</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-配置-vue-router\"><a href=\"#2-配置-vue-router\" class=\"headerlink\" title=\"2.配置 vue-router\"></a>2.配置 vue-router</h3><p>在 <strong>resources/assets/js</strong> 目录下新建目录 router ，同时在 router 目录下新建 index.js 文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span>;</div><div class=\"line\">Vue.use(VueRouter);</div><div class=\"line\">        </div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> VueRouter(&#123;</div><div class=\"line\">    <span class=\"attr\">saveScrollPosition</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">routes</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">'hello'</span>,</div><div class=\"line\">            <span class=\"attr\">path</span>: <span class=\"string\">'/hello'</span>,</div><div class=\"line\">            <span class=\"attr\">component</span>: <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"keyword\">void</span>(<span class=\"built_in\">require</span>([<span class=\"string\">'../components/Hello.vue'</span>], resolve))</div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-引入-vue-router\"><a href=\"#3-引入-vue-router\" class=\"headerlink\" title=\"3.引入 vue-router\"></a>3.引入 vue-router</h3><p>在 <strong>resources/assets/js</strong> 目录下新建 App.vue 文件<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">    &lt;div&gt;</div><div class=\"line\">        &lt;h1&gt;Hello, &#123;&#123; msg &#125;&#125;!&lt;/h1&gt;</div><div class=\"line\">        &lt;router-view&gt;&lt;/router-view&gt; &lt;!-- 路由引入的组件将在这里被渲染 --&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\">     </div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">export default &#123;</div><div class=\"line\">    data() &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            msg: 'Vue'</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">    </div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>修改 <strong>resources/assets/js/app.js</strong> 文件为<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// import Hello from './components/Hello.vue';</span></div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-default/index.css'</span>;</div><div class=\"line\">Vue.use(ElementUI);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router/index.js'</span>;  </div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">    <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span>,</div><div class=\"line\">    router,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-重新编译\"><a href=\"#4-重新编译\" class=\"headerlink\" title=\"4.重新编译\"></a>4.重新编译</h3><p>执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure></p>\n<p>通过路由访问 hello 组件   </p>\n<p><img src=\"/images/Larvuent_4.jpg\" alt=\"\"></p>\n<p>以后如果要添加组件，只需在 resources/assets/js/components 目录下新建 vue 文件，在 resources/assets/js/router/index.js 文件里引入，然后就可以通过路由访问了。</p>\n<h2 id=\"代码拆分\"><a href=\"#代码拆分\" class=\"headerlink\" title=\"代码拆分\"></a>代码拆分</h2><p>代码拆分是将一些不经常变动的代码提取出来，以避免每次都要重新编译，如果你频繁更新应用的 JavaScript，需要考虑对 vendor 库进行提取和拆分，这样的话，一次修改应用代码不会影响 vendor.js 文件的缓存。</p>\n<p>Laravel Mix 的 extract 方法可以实现这样的功能：</p>\n<p>修改项目根目录下的 webpack.mix.js 文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mix.js(<span class=\"string\">'resources/assets/js/app.js'</span>, <span class=\"string\">'public/js'</span>)</div><div class=\"line\">   .sass(<span class=\"string\">'resources/assets/sass/app.scss'</span>, <span class=\"string\">'public/css'</span>)</div><div class=\"line\">   .extract([<span class=\"string\">'vue'</span>,<span class=\"string\">'axios'</span>]);</div></pre></td></tr></table></figure></p>\n<p>extract 方法接收包含所有库的数组或你想要提取到 vendor.js 文件的模块，使用上述代码作为示例，Mix 将会生成如下文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public/js/manifest.js  // Webpack manifest runtime</div><div class=\"line\">public/js/vendor.js  // vendor 库</div><div class=\"line\">public/js/app.js  // 应用代码</div></pre></td></tr></table></figure></p>\n<p>同时修改 resources/views/index.blade.php 文件为<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"csrf-token\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"&#123;&#123; csrf_token() &#125;&#125;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Larvuent<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; mix('js/manifest.js') &#125;&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; mix('js/vendor.js') &#125;&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; mix('js/app.js') &#125;&#125;\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>全局的 mix 函数会根据 public/mix-manifest.json 中的路径去加载对应的文件，同时也要注意引入三个 js 文件的顺序，以避免出错。</p>\n<p>重新执行命令，就可以了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run dev</div></pre></td></tr></table></figure></p>\n<p>使用下面的命令，可以监视前端资源的改变，并自动编译。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm run watch</div></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>到目前为止，这篇文章也快写完了，为了便于理解，本文第一次搭建时，尽量简单，能运行即可，成功之后，再添加其它功能。前端编译工具使用基于 webpack 的 Laravel Mix，一般情况下，它可以满足大部分的需求，当然你也可以完全抛弃 Laravel Mix，配置自己的 webpack，后期如果有需求，可以再写一篇相关的文章。</p>\n<p>本文全部代码，可以到 github 上获取： </p>\n<p><a href=\"https://github.com/mrzhouxiaofei/Larvuent\" target=\"_blank\" rel=\"external\">https://github.com/mrzhouxiaofei/Larvuent</a></p>\n<p>如有疑问，欢迎回复交流。<br><br><br></p>\n","categories":["后端"],"tags":["PHP","环境搭建"]},{"title":"跨域问题解决方案之 JSONP","url":"http://mrzhouxiaofei.com/2017/08/09/跨域问题解决方案之 JSONP/","content":"<h2 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h2><p>由于浏览器同源策略的限制，为了保证安全，是不能执行其他网站的脚本的，通俗点来说，就是执行的 URL 不在你的网站下。跨域即绕过同源策略的限制，获取其他网站的数据。</p>\n<p>同源的定义：协议，域名，端口均相同。</p>\n<p>简单说明对 <a href=\"http://mrzhouxiaofei.com/test.js\">http://mrzhouxiaofei.com/test.js</a> 的同源检测情况：</p>\n<p><img src=\"/images/同源检测.jpg\" alt=\"\"></p>\n<h2 id=\"为什么跨域\"><a href=\"#为什么跨域\" class=\"headerlink\" title=\"为什么跨域\"></a>为什么跨域</h2><p>一般公司内部都会有许多不同的子域，举个例子，比如百度，假设 pan.baibu.com 需要获取用户的信息，就要去 user.baidu.com 下去获取，前者访问后者的数据就属于跨域，除此之外，引用其他网站的各种资源也属于跨域，总之，跨域的使用范围还是很广的。</p>\n<h2 id=\"怎么跨域\"><a href=\"#怎么跨域\" class=\"headerlink\" title=\"怎么跨域\"></a>怎么跨域</h2><p>跨域的方式有许多种，主要有 JSONP，CORS，以及通过 document.domain 来跨子域等等，感兴趣的可以了解一下其它几种跨域方式，本篇文章将主要介绍目前使用较多的 JSONP 方式。</p>\n<h2 id=\"JSON-和-JSONP\"><a href=\"#JSON-和-JSONP\" class=\"headerlink\" title=\"JSON 和 JSONP\"></a>JSON 和 JSONP</h2><p>介绍通过 JSONP 跨域之前，先理解 JSON 和 JSONP 这两个概念。</p>\n<p><strong>JSON</strong> 不用多解释，之前接触的也比较多，它是一种数据交换格式，在它出现之前，XML 曾一统天下，它出现之后，抢夺了 XML 的半壁江山，并且越来越流行。</p>\n<p>JSON 的优点：</p>\n<ol>\n<li>基于纯文本，跨平台传递极其简单；</li>\n<li>JavaScript 原生支持，后台语言几乎全部支持；</li>\n<li>轻量级数据格式，占用字符数量极少，特别适合互联网传递；</li>\n<li>可读性较强</li>\n</ol>\n<p><strong>JSONP</strong> （JSON with Padding）是数据格式 JSON 的一种“使用模式”，可以让网页从别的网域要数据，也即跨域获取数据。简单来说，JSONP 就是一种开发人员创造出的非官方跨域数据交互协议。学过计算机网络的同学，应该比较容易理解什么是协议。</p>\n<h2 id=\"通过-JSONP-跨域\"><a href=\"#通过-JSONP-跨域\" class=\"headerlink\" title=\"通过 JSONP 跨域\"></a>通过 JSONP 跨域</h2><h3 id=\"JSONP-的产生\"><a href=\"#JSONP-的产生\" class=\"headerlink\" title=\"JSONP 的产生\"></a>JSONP 的产生</h3><p>我们知道，通过 ajax 请求文件存在跨域无权访问时，无论你是什么网页，一律不被允许，不过我们一定有过这种情况：</p>\n<ol>\n<li>通过 script 标签引入过域外文件，比如引入百度的 JQuery；</li>\n<li>通过 img 标签引入过于在线的图片；</li>\n</ol>\n<p>通过以上两种情况，我们发现 Web 页面上调用 Js 文件或引用图片是不受跨域影响的，进一步发现，凡是拥有 src 这个属性的标签，都拥有跨域的能力。</p>\n<p>这样以来服务器把客户端需要的数据封装成包含 JSON 的 Js 文件 ，客户端就可以通过 script 标签，调用服务器动态生成的 Js 文件，来实现跨域获取数据了。</p>\n<p>客服端获取数据后，就可以对数据经行处理了，这看起来非常 ajax，但其实并不一样。</p>\n<p>为了便于客户端使用数据，逐渐形成了一种非正式的传输协议，这种协议就是 JSONP，该协议的一个特点就是允许用户传递一个 callback 参数给服务器，然后服务器返回数据时会将这个 callback 参数作为函数名来包裹住 JSON 数据，这样客户端就可以随意定制自己的函数来自动处理返回的数据了。</p>\n<h3 id=\"JSONP-的实现\"><a href=\"#JSONP-的实现\" class=\"headerlink\" title=\"JSONP 的实现\"></a>JSONP 的实现</h3><p>1.假设远程服务器 mrzhouxiaofei.com 根目录下有这样一个文件 test.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"string\">\"我是远程数据\"</span>)</div></pre></td></tr></table></figure>\n<p>本地服务器 localhost 下有个 index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://mrzhouxiaofei.com/test.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>毫无疑问，页面弹出一个提示框，显示跨域调用成功。</p>\n<p>2.假设远程服务器 mrzhouxiaofei.com 根目录下有这样一个文件 test.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">doSomething(&#123;<span class=\"string\">\"info\"</span>: <span class=\"string\">\"我是远程数据\"</span>&#125;)</div></pre></td></tr></table></figure>\n<p>本地服务器 localhost 下有个 jsonp.html 页面，其中定义了一个函数，然后在远程 test.js 中传入数据进行调用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      alert(<span class=\"string\">\"远程数据：\"</span> + data.info)</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://mrzhouxiaofei.com/test.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>运行之后，页面弹出提示窗口，并且跨域获取了远程的数据，但是怎么让服务器知道它应该调用哪个客户端的函数呢？</p>\n<p>3.这次先写本地服务器 localhost 下的 jsonp.html 的代码，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> doSomething = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      alert(<span class=\"string\">\"远程数据：\"</span> + data.info)</div><div class=\"line\">    &#125;</div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>)</div><div class=\"line\">    script.src = <span class=\"string\">\"http://mrzhouxiaofei.com/test.js?callback=doSomething\"</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>].appendChild(script)</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这次的代码不再写死，而是实现了动态查询，而这正是 JSONP 实现的核心部分，通过代码，可以看到，客户端调用的 URL，传入了一个 callback 参数，告诉服务器我的本地函数为 doSomething，这时服务器就会把客户端需要的数据传入到这个函数内，供客户端的调用，这样就完成了一次请求过程。</p>\n<p>远程服务器将要返回的数据如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">doSomething(&#123;</div><div class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"number\">1001</span>,</div><div class=\"line\">  <span class=\"string\">\"info\"</span>: <span class=\"string\">\"我是远程数据\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>到此为止，客户端就能跨域获取数据了，另外一点，<strong>JSONP 只能发送 GET 请求，不能发送 POST 请求</strong>。</p>\n<p><strong>说明：</strong>该文章部分内容参考 <a href=\"http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\" target=\"_blank\" rel=\"external\">【原创】说说JSON和JSONP，也许你会豁然开朗，含jQuery用例</a> ,看不懂的，可以看看这篇文章。<br><br><br></p>\n","categories":["前端"],"tags":["JavaScript","跨域","JSONP"]},{"title":"摔跤吧 爸爸","url":"http://mrzhouxiaofei.com/2017/07/17/摔跤吧 爸爸/","content":"<p><img src=\"/images/摔跤吧爸爸.jpg\" alt=\"\"></p>\n<p>今天下午，小组组织观看了印度电影《摔跤吧 爸爸》，之后进行了亲切而友好的讨论，花了一整个下午的时间，收获颇丰。</p>\n<p>电影讲述了一个全国摔跤冠军，为生活所迫，放弃运动生涯，转而希望培养自己的儿子，无奈生了四个女儿，偶然间发现两个女儿拥有摔跤天赋，继而培养自己的两个女儿成为女子摔跤冠军，打破印度传统的励志故事。这个电影属于那种你看了开头就基本能猜到结局的电影，然而却能做到全程无尿点，让你痴迷于演员的演技，实属不易。</p>\n<p>看完整部电影，给我留下深刻印象的莫过于电影中的音乐了，尽管语言不通，但是适时响起的音乐，还是让我产生了共鸣。在我的印象中，经典的电影不仅仅是故事好，演员演技棒，而且音乐也一定很不错，这部电影满足了我对经典的要求。</p>\n<p>电影中的父亲，梦想着有一天能获得世界摔跤冠军，为印度赢得一块金牌，后来经历一系列的事，转而开始培养自己的两个女儿。在印度那样一个女人露腿都会被人议论纷纷的社会中，可想而知，父亲和两个女儿受到的阻力是巨大的。然而父亲坚定的信念，对金牌的执著，以及两个女儿在听到女伴结婚时说的话之后的顿悟，都是对冲破阻力最大的帮助。在经历一番之后，最终，两个女儿都获得了世界摔跤冠军。</p>\n<p>电影中的父亲为什么对金牌有那么深的执念？其实了解一下印度就知道了，印度一直要成为一个大国，而且随着近年来的高速发展，确实也取得了重大的成就，在一些重要的场合也有了一定的话语权。可是，一到大型的国际运动赛事，印度人就集体消失了，这对于一个大国来说，恐怕是不合适的。曾经我们也是这样，还记得李宁“兵败汉城”之后，甚至有人直接给他寄刀子。我们经过数十年的发展，甚至直到 2008 年奥运会之后，才不再唯金牌论，而是开始关注运动员本身。这样才会有傅园慧，宁泽涛，尽管没有在奥运会上获得金牌，却依然受到大家的喜爱的运动员。对于印度来说，想要度过这样一个阶段，恐怕还需要一些时间。</p>\n<p>电影上映之后，票房尚好，口碑也很不错，然而却有一些不同的声音。比如批评父亲的专权，批评父亲为了让女儿实现自己的梦想，强迫她们做自己不喜欢的事，没有让她们选择自己的未来。其实我们这样说是不合适的，你没有站在那样一个社会中，只是靠了解和倾听，是永远也感受不到的。讲个真事，有一个人早年间逃荒到了黑龙江一个偏远的山村，后来生了七个女儿一个儿子，这个人懂得一点文化，知道知识的重要。于是逼迫孩子们读书，孩子们不听话时，甚至不惜体罚，后来孩子们都考上了大学，离开了山村。女儿们后来谈起父亲，依然会说父亲残忍，专权，不给她们自由，可是却没有一个人埋怨父亲。讲这个例子，可能不太合适，毕竟逼迫孩子们读书和逼迫女儿去练摔跤是不能相提并论的。但是在电影中却是最合适的，首先两个女儿并没有一个明确的目标，如果不是父亲的干预，可能上几年学，然后在十四岁的时候嫁给一个素未谋面的男人；其次他们的父亲曾经是全国摔跤冠军，这是一个极大的资源，父亲有着丰富的经验，能给她们最合适的指导。如果说父亲只是为实现自己的梦想，把女儿当作实现梦想的工具，那么在女儿不听话时，就应该会有体罚的桥段。在电影中，完全没有这样的情节，甚至最生气的一次，女儿去参加别人的婚礼，也只是打了大侄子一巴掌。最重要的是，父亲也定了一年之约，如果一年后，女儿们还没爱上摔跤，就永远放弃。由此可见，父亲是深深的爱着女儿，并尊重她们的选择，所谓专权，是不成立的。</p>\n<p>电影之外：饰演父亲的阿米尔 汗，是印度国宝级演员，不仅主演了多部经典的电影，而且一直致力于公益等社会事业，印度有他，国之甚兴。<br><br><br>    </p>\n","categories":["随笔"],"tags":["影评"]},{"title":"JavaScript 中的数组函数","url":"http://mrzhouxiaofei.com/2017/06/10/JavaScript 中的数组函数/","content":"<p><em>JavaScript 中也有很多数组函数：</em></p>\n<p>indexOf()<br>搜索一个指定的元素的位置<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'java'</span>,<span class=\"string\">'php'</span>,<span class=\"string\">'js'</span>];</div><div class=\"line\">alert(a.indexOf(<span class=\"string\">'php'</span>)); <span class=\"comment\">// 返回 1</span></div></pre></td></tr></table></figure></p>\n<p>slice()<br>截取数组的部分元素，返回一个新数组<br>该函数类似字符串函数中的 slice()<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'java'</span>,<span class=\"string\">'php'</span>,<span class=\"string\">'js'</span>];</div><div class=\"line\">alert(a.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>)); <span class=\"comment\">// 返回 php</span></div></pre></td></tr></table></figure></p>\n<p>push() pop()<br>向数组末尾添加一个或多个元素，删除数组最后一个元素<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'java'</span>,<span class=\"string\">'php'</span>];</div><div class=\"line\">alert(a.push(<span class=\"string\">'js'</span>)); <span class=\"comment\">// 返回 3</span></div><div class=\"line\">alert(a.pop()); <span class=\"comment\">//返回 js</span></div></pre></td></tr></table></figure></p>\n<p>unshift() shift()<br>向数组头部添加一个或多个元素，删除并返回第一个元素<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'java'</span>,<span class=\"string\">'php'</span>];</div><div class=\"line\">alert(a.unshift(<span class=\"string\">'js'</span>)); <span class=\"comment\">// 返回 3</span></div><div class=\"line\">alert(a.shift()); <span class=\"comment\">//返回 js</span></div></pre></td></tr></table></figure></p>\n<p>sort()<br>对数组的元素进行排序<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'mysql'</span>,<span class=\"string\">'php'</span>,<span class=\"string\">'js'</span>];</div><div class=\"line\">alert(a.sort()); <span class=\"comment\">// 返回 js,mysql,php</span></div></pre></td></tr></table></figure></p>\n<p>reverse()<br>颠倒数组中的元素<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'java'</span>,<span class=\"string\">'php'</span>,<span class=\"string\">'js'</span>];</div><div class=\"line\">alert(a.reverse()); <span class=\"comment\">// 返回 js,php,java</span></div></pre></td></tr></table></figure></p>\n<p>splice()<br>从指定的索引开始删除若干元素，然后再从该位置添加若干元素<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'java'</span>,<span class=\"string\">'php'</span>,<span class=\"string\">'js'</span>];</div><div class=\"line\">a.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">'mysql'</span>); </div><div class=\"line\">alert(a); <span class=\"comment\">// 返回 java,mysql,php,js</span></div></pre></td></tr></table></figure></p>\n<p>concat()<br>连接两个或多个数组，返回新数组<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\">alert(a.concat(b)); <span class=\"comment\">//返回 1,2,3,4,5</span></div></pre></td></tr></table></figure></p>\n<p>join()<br>将数组中每个元素都用指定的字符串连接起来，返回新字符串<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'java'</span>,<span class=\"string\">'php'</span>,<span class=\"string\">'js'</span>];</div><div class=\"line\">alert(a.join(<span class=\"string\">\"-\"</span>)); <span class=\"comment\">//返回 java-php-js</span></div></pre></td></tr></table></figure></p>\n<p><br><br></p>\n","categories":["前端"],"tags":["JavaScript"]},{"title":"JavaScript 中常用的字符串函数","url":"http://mrzhouxiaofei.com/2017/06/03/JavaScript 中常用的字符串函数/","content":"<p><em>JavaScript 中有很多字符串函数，其中一些较常用的总结如下：</em></p>\n<p>toUpperCase()<br>把一个字符串全部转换为大写</p>\n<p>toLowerCase()<br>把一个字符串全部转换为小写</p>\n<p>charAt(index)<br>返回指定位置的字符<br>Js 没有字符数据类型，即 char 类型，所以返回的字符是长度为 1 的字符串<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Hello,world'</span>;</div><div class=\"line\">alert(a.charAt(<span class=\"number\">0</span>));  <span class=\"comment\">//返回 H</span></div></pre></td></tr></table></figure></p>\n<p>concat()<br>用于连接两个或多个字符串<br>通常使用 “+” 运算符会更简便一些<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Hello'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">','</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">'world'</span></div><div class=\"line\">alert(a.concat(b,c)); <span class=\"comment\">//返回 Hello,world</span></div></pre></td></tr></table></figure></p>\n<p>indexOf()<br>返回某个指定的字符串值在字符串中首次出现的位置<br>若未找到，返回 -1<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Hello,world'</span>;</div><div class=\"line\">alert(a.indexOf(<span class=\"string\">'l'</span>)); <span class=\"comment\">//返回 2</span></div></pre></td></tr></table></figure></p>\n<p>match()<br>可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Hello,world'</span>;</div><div class=\"line\">alert(a.match(<span class=\"string\">'world'</span>)); <span class=\"comment\">//返回 world</span></div><div class=\"line\">alert(a.match(<span class=\"string\">'WORLD'</span>)); <span class=\"comment\">//返回 null</span></div></pre></td></tr></table></figure></p>\n<p>replace()<br>用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串<br>该函数功能强大<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Hello,world'</span>;</div><div class=\"line\">alert(a.replace(<span class=\"regexp\">/world/</span>,<span class=\"string\">'JavaScript'</span>)); <span class=\"comment\">//返回 Hello,JavaScript</span></div></pre></td></tr></table></figure></p>\n<p>search()<br>用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Hello,world'</span>;</div><div class=\"line\">alert(a.search(<span class=\"regexp\">/world/</span>)); <span class=\"comment\">//返回 6</span></div><div class=\"line\">alert(a.search(<span class=\"regexp\">/WORLD/</span>)); <span class=\"comment\">//返回 -1</span></div><div class=\"line\">alert(a.search(<span class=\"regexp\">/WORLD/i</span>)); <span class=\"comment\">//返回 6</span></div></pre></td></tr></table></figure></p>\n<p>split()<br>用于把一个字符串分割成字符串数组<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Hello'</span>;</div><div class=\"line\">alert(a.split(<span class=\"string\">\"\"</span>));  <span class=\"comment\">//返回 H,e,l,l,o</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"三个分割字符串函数\"><a href=\"#三个分割字符串函数\" class=\"headerlink\" title=\"三个分割字符串函数\"></a>三个分割字符串函数</h3><p>slice()<br>提取字符串的某个部分，并以新的字符串返回被提取的部分<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Hello,world'</span>;</div><div class=\"line\">alert(a.slice(<span class=\"number\">6</span>)); <span class=\"comment\">//返回 world</span></div><div class=\"line\">alert(a.slice(<span class=\"number\">6</span>,<span class=\"number\">10</span>)); <span class=\"comment\">//返回 worl</span></div></pre></td></tr></table></figure></p>\n<p>substring()<br>用于提取字符串中介于两个指定下标之间的字符<br>该函数不接受负的参数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Hello,world'</span>;</div><div class=\"line\">alert(a.substring(<span class=\"number\">6</span>)); <span class=\"comment\">//返回 world</span></div><div class=\"line\">alert(a.substring(<span class=\"number\">6</span>,<span class=\"number\">10</span>)); <span class=\"comment\">//返回 worl</span></div></pre></td></tr></table></figure></p>\n<p>substr()<br>可在字符串中抽取从 start 下标开始的指定数目的字符<br>ECMAscript 没有对该方法进行标准化，因此反对使用它<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Hello,world'</span>;</div><div class=\"line\">alert(a.substr(<span class=\"number\">6</span>,<span class=\"number\">5</span>)); <span class=\"comment\">//返回 world</span></div></pre></td></tr></table></figure></p>\n<p>slice()、substring() 和 substr() （不建议使用）都可返回字符串的指定部分。slice() 比 substring() 要灵活一些，因为它允许使用负数作为参数。slice() 与 substr() 有所不同，因为它用两个字符的位置来指定子串，而 substr() 则用字符位置和长度来指定子串。<br><br><br></p>\n","categories":["前端"],"tags":["JavaScript"]},{"title":"PHP 实现邮件发送(PHPMailer+QQ邮箱)","url":"http://mrzhouxiaofei.com/2017/03/13/PHP 实现邮件发送(PHPMailer+QQ邮箱)/","content":"<p>最近复习原生 PHP，看到邮件函数这一部分，就试着写一下邮件功能，在网上搜了一下，主要有两种实现方式：<br>    　　<strong>1.PHP 自带的 mail() 函数</strong><br>    　　<strong>2.封装的 smtp 邮件发送类</strong></p>\n<p>下面来一一介绍</p>\n<h2 id=\"PHP-自带的-mail-函数\"><a href=\"#PHP-自带的-mail-函数\" class=\"headerlink\" title=\"PHP 自带的 mail() 函数\"></a>PHP 自带的 mail() 函数</h2><p>浏览一下 PHP 文档，mail() 函数的注释如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170311144907107?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhvdXhpYW9mZWkxOTk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>即若要使用 mail() 函数，需要本地安装一个邮件系统或者必须设置一台不需要中继的邮件发送服务器，但现在要找到一台不需要身份验证的邮件发送中继几乎不可能，所以使用 mail() 函数往往无法成功发送电子邮件，对使用邮件系统感兴趣的，可以自己研究。而使用封装的smtp邮件发送类来实现，则要方便的多。</p>\n<h2 id=\"封装的-smtp-邮件发送类\"><a href=\"#封装的-smtp-邮件发送类\" class=\"headerlink\" title=\"封装的 smtp 邮件发送类\"></a>封装的 smtp 邮件发送类</h2><p>封装的smtp邮件发送类，网上可以找到很多，其中开源的 PHPMailer 是其中比较流行的一个，只需简单配置，即可使用，想了解更多，请移步 <a href=\"http://baike.baidu.com/link?url=gK7jI0Z90YK7TgX-dbAtjva9_5K3J119D2Q2T8zfZY24AC1Q5oWduRHzTPwJiPV7SEQ3MCFtURg4GXb-Dzh8rdit8iiawGyIR9fK8tNCxZ_\" target=\"_blank\" rel=\"external\">PHPMailer</a> PHPMailer开源地址:<a href=\"https://github.com/PHPMailer/PHPMailer\" target=\"_blank\" rel=\"external\">https://github.com/PHPMailer/PHPMailer</a></p>\n<p>可以直接把项目 clone 下来，或者下载 zip 压缩文件，在配置之前，需要开启邮箱的 smtp 功能，这里以 QQ 邮箱为例：</p>\n<p>登录 QQ 邮箱，点击<strong>设置</strong><br><img src=\"http://img.blog.csdn.net/20170311155901248?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhvdXhpYW9mZWkxOTk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><strong>账户</strong><br><img src=\"http://img.blog.csdn.net/20170311155920354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhvdXhpYW9mZWkxOTk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>拉到最后，找到<br><img src=\"http://img.blog.csdn.net/20170311160214608?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhvdXhpYW9mZWkxOTk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>根据提示，开启前两项服务，然后生成授权码，记下来，之后配置会用<br><img src=\"http://img.blog.csdn.net/20170311160448283?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhvdXhpYW9mZWkxOTk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>clone 下来的 PHPMailer 项目的 README 文件提供了一个简单的引入例子<br><strong>A Simple Example</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'PHPMailerAutoload.php'</span>;</div><div class=\"line\">$mail = <span class=\"keyword\">new</span> PHPMailer;</div><div class=\"line\"><span class=\"comment\">//$mail-&gt;SMTPDebug = 3;  // Enable verbose debug output</span></div><div class=\"line\">              </div><div class=\"line\">$mail-&gt;isSMTP();  <span class=\"comment\">// Set mailer to use SMTP</span></div><div class=\"line\">$mail-&gt;Host = <span class=\"string\">'smtp1.example.com;smtp2.example.com'</span>;  <span class=\"comment\">// Specify main and backup SMTP servers</span></div><div class=\"line\">$mail-&gt;SMTPAuth = <span class=\"keyword\">true</span>;   <span class=\"comment\">// Enable SMTP authentication</span></div><div class=\"line\">$mail-&gt;Username = <span class=\"string\">'user@example.com'</span>;  <span class=\"comment\">// SMTP username</span></div><div class=\"line\">$mail-&gt;Password = <span class=\"string\">'secret'</span>;  <span class=\"comment\">// SMTP password</span></div><div class=\"line\">$mail-&gt;SMTPSecure = <span class=\"string\">'tls'</span>;  <span class=\"comment\">// Enable TLS encryption, `ssl` also accepted</span></div><div class=\"line\">$mail-&gt;Port = <span class=\"number\">587</span>;  <span class=\"comment\">// TCP port to connect to</span></div><div class=\"line\">                 </div><div class=\"line\">$mail-&gt;setFrom(<span class=\"string\">'from@example.com'</span>, <span class=\"string\">'Mailer'</span>);</div><div class=\"line\">$mail-&gt;addAddress(<span class=\"string\">'joe@example.net'</span>, <span class=\"string\">'Joe User'</span>);  <span class=\"comment\">// Add a recipient</span></div><div class=\"line\">$mail-&gt;addAddress(<span class=\"string\">'ellen@example.com'</span>);  <span class=\"comment\">// Name is optional</span></div><div class=\"line\">$mail-&gt;addReplyTo(<span class=\"string\">'info@example.com'</span>, <span class=\"string\">'Information'</span>);</div><div class=\"line\">$mail-&gt;addCC(<span class=\"string\">'cc@example.com'</span>);</div><div class=\"line\">$mail-&gt;addBCC(<span class=\"string\">'bcc@example.com'</span>);</div><div class=\"line\">                        </div><div class=\"line\">$mail-&gt;addAttachment(<span class=\"string\">'/var/tmp/file.tar.gz'</span>);  <span class=\"comment\">// Add attachments</span></div><div class=\"line\">$mail-&gt;addAttachment(<span class=\"string\">'/tmp/image.jpg'</span>, <span class=\"string\">'new.jpg'</span>);  <span class=\"comment\">// Optional name</span></div><div class=\"line\">$mail-&gt;isHTML(<span class=\"keyword\">true</span>);  <span class=\"comment\">// Set email format to HTML</span></div><div class=\"line\">$mail-&gt;Subject = <span class=\"string\">'Here is the subject'</span>;</div><div class=\"line\">$mail-&gt;Body    = <span class=\"string\">'This is the HTML message body &lt;b&gt;in bold!&lt;/b&gt;'</span>;</div><div class=\"line\">$mail-&gt;AltBody = <span class=\"string\">'This is the body in plain text for non-HTML mail clients'</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(!$mail-&gt;send()) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'Message could not be sent.'</span>;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'Mailer Error: '</span> . $mail-&gt;ErrorInfo;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'Message has been sent'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 PHPMailer 文件夹下，新建一个 index.php 文件，复制粘贴以上代码，修改各项配置</p>\n<p><img src=\"http://img.blog.csdn.net/20170311162934199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhvdXhpYW9mZWkxOTk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>由于使用了 SSL 连接，所以需要开启PHP的 openssl 扩展，这里不再赘述，配置完之后，放在 Web 服务器下，访问 index.php，正常的话，就能收到一封测试邮件了，如果失败，可以根据报错信息进行排查。</p>\n<h2 id=\"最小化安装-推荐\"><a href=\"#最小化安装-推荐\" class=\"headerlink\" title=\"最小化安装(推荐)\"></a>最小化安装(推荐)</h2><p>直接把整个 PHPMailer 项目放到服务器上，未免太浪费空间，而且项目中的许多文件都是没用的，所以 README 文件中也提到了最小化安装<br><img src=\"http://img.blog.csdn.net/20170311164154835?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhvdXhpYW9mZWkxOTk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>文中提到 <strong>class.phpmailer.php</strong> 是必需的，另外的文件是可选的，因为我们使用的是 SMTP，所以还需要<strong>class.smtp.php</strong>，如果你使用了 POP3，则需要引入 <strong>class.pop3.php</strong>，新建一个 Mail 文件夹，导入以上两个文件，新建 index.html,send.php，文件结构如下:<br><img src=\"http://img.blog.csdn.net/20170311165709198?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhvdXhpYW9mZWkxOTk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>两个文件代码如下</p>\n<p>index.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>phpmailer Unit Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>phpmailer Unit Test<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\">\t请你输入<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">\"#FF6666\"</span>&gt;</span>收信<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span>的邮箱地址:</div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"phpmailer\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"./send.php\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></div><div class=\"line\">\t邮箱地址: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"address\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"发送\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>send.php<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\t<span class=\"keyword\">require</span>(<span class=\"string\">\"class.phpmailer.php\"</span>);  <span class=\"comment\">//下载的文件必须放在该文件所在目录</span></div><div class=\"line\">\t<span class=\"keyword\">require</span>(<span class=\"string\">\"class.smtp.php\"</span>);</div><div class=\"line\">\t$mail = <span class=\"keyword\">new</span> PHPMailer();  <span class=\"comment\">//建立邮件发送类</span></div><div class=\"line\">\t$address = $_POST[<span class=\"string\">'address'</span>];</div><div class=\"line\">\t$mail-&gt;IsSMTP();  <span class=\"comment\">// 使用SMTP方式发送</span></div><div class=\"line\">\t$mail-&gt;CharSet=<span class=\"string\">'UTF-8'</span>;  <span class=\"comment\">// 设置邮件的字符编码</span></div><div class=\"line\">\t$mail-&gt;Host = <span class=\"string\">\"smtp.qq.com\"</span>;  <span class=\"comment\">// 您的企业邮局域名</span></div><div class=\"line\">\t$mail-&gt;SMTPAuth = <span class=\"keyword\">true</span>;  <span class=\"comment\">// 启用SMTP验证功能</span></div><div class=\"line\">\t$mail-&gt;SMTPSecure = <span class=\"string\">\"ssl\"</span>;</div><div class=\"line\">\t$mail-&gt;Port = <span class=\"string\">\"465\"</span>;  <span class=\"comment\">//SMTP端口</span></div><div class=\"line\">\t$mail-&gt;Username = <span class=\"string\">\"xxx@qq.com\"</span>;  <span class=\"comment\">// 邮箱用户名(请填写完整的email地址)</span></div><div class=\"line\">\t$mail-&gt;Password = <span class=\"string\">\"xxx\"</span>;  <span class=\"comment\">// 授权码</span></div><div class=\"line\">\t$mail-&gt;From = <span class=\"string\">\"xxx@qq.com\"</span>;  <span class=\"comment\">//邮件发送者email地址</span></div><div class=\"line\">\t$mail-&gt;FromName = <span class=\"string\">\"您的名称\"</span>;</div><div class=\"line\">\t$mail-&gt;AddAddress(<span class=\"string\">\"$address\"</span>, <span class=\"string\">\"\"</span>);  <span class=\"comment\">//收件人地址(\"收件人email\",\"收件人姓名\")</span></div><div class=\"line\">\t$mail-&gt;AddReplyTo(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">\t$mail-&gt;AddAttachment(<span class=\"string\">\"/var/tmp/file.tar.gz\"</span>);   <span class=\"comment\">// 添加附件</span></div><div class=\"line\">\t$mail-&gt;IsHTML(<span class=\"keyword\">true</span>);   <span class=\"comment\">// set email format to HTML //是否使用HTML格式</span></div><div class=\"line\">\t$mail-&gt;Subject = <span class=\"string\">\"PHPMailer测试邮件\"</span>;  <span class=\"comment\">//邮件标题</span></div><div class=\"line\">\t$mail-&gt;Body = <span class=\"string\">\"Hello,这是测试邮件\"</span>;  <span class=\"comment\">//邮件内容</span></div><div class=\"line\">\t$mail-&gt;AltBody = <span class=\"string\">\"This is the body in plain text for non-HTML mail clients\"</span>;  <span class=\"comment\">//附加信息</span></div><div class=\"line\">\t<span class=\"keyword\">if</span>(!$mail-&gt;Send())&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"邮件发送失败. &lt;p&gt;\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"错误原因: \"</span> . $mail-&gt;ErrorInfo;</div><div class=\"line\">\t\t<span class=\"keyword\">exit</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"邮件发送成功\"</span>;</div><div class=\"line\">\t<span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>配置参数和上面的一样，不再赘述，之后点击 index.html 文件<br><img src=\"http://img.blog.csdn.net/20170312145914924?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhvdXhpYW9mZWkxOTk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>输入邮箱地址就可以啦<br><img src=\"http://img.blog.csdn.net/20170312145935463?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhvdXhpYW9mZWkxOTk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20170312150010401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhvdXhpYW9mZWkxOTk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><strong>以上代码均为测试，若用于生产环境，可以对其进行封装</strong><br><strong>如有问题，欢迎回复交流</strong><br><br><br></p>\n","categories":["后端"],"tags":["PHP"]},{"title":"关于本博客","url":"http://mrzhouxiaofei.com/2017/01/05/关于本博客/","content":"<h2 id=\"关于本博客\"><a href=\"#关于本博客\" class=\"headerlink\" title=\"关于本博客\"></a>关于本博客</h2><p>想要搭建自己的个人博客也有一段时间了，之前考核做了个人博客，后来买空间，买域名，把例子也放了上去，但那个做的实在粗糙，拿不出手，放上去一段时间，就撤下来了。</p>\n<p>之前重写博客，但是没有做好规划，后端写了一部分，去写前端，发现页面写的太丑，对于一个追求完美的人来说，真的不能接受，如此，就搁置了一段时间。而且我搭建个人博客的初衷是记录自己的学习和生活，当然如果能对别人有一些帮助，那就更好了，一直在搭建博客上钻研，这就显得本末倒置了。</p>\n<p>后来几个小伙伴用 <strong>WordPress</strong> 搭建了博客，看着效果还不错，就去试用了一段时间，不过越用越感觉它太重了，很多的功能都用不到，我只是想安安静静的写博客啊。无奈，放弃。</p>\n<p>经常在网上搜索问题，也常看别人的博客，发现很多人的博客都放在 <strong>GitHub</strong> 上，效果很好，页面也很简洁。了解一下，知道了 <strong>GitHub Pages</strong>，顿时感觉这就是我想要的，马上摸索，又知道了博客搭建工具 <strong>Hexo</strong>， 然后很快搭建了自己的博客。</p>\n<p>使用 <strong>Hexo</strong> 最大的好处，就是你不用去关注太多东西，只需专注博客的内容就好了，简单配置下，就可以使用，而且不用像之前一样去买云服务器。如果感觉不喜欢 <strong>username.github.io</strong> ，买个逼格高的域名解析一下就行了。</p>\n<p>另外，<strong>Hexo</strong> 提供了很多主题，如果不喜欢，随时可以换。秉持着 <strong>Simple is the best</strong> 的原则，选择了现在的主题，喜欢的，可以在这里 <a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"external\">forsigner</a> 找到主题原作者。 </p>\n<p>博客搭建完成了，以后的博客都会同步更新到这里，欢迎交流！<br><br><br></p>\n","categories":["随笔"],"tags":["随笔"]},{"title":"about","url":"http://mrzhouxiaofei.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://mrzhouxiaofei.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://mrzhouxiaofei.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://mrzhouxiaofei.com/search/index.html","content":"","categories":[],"tags":[]}]